[{"/Users/kipland/Metaverse/pz-portal-react/src/index.js":"1","/Users/kipland/Metaverse/pz-portal-react/src/App.js":"2"},{"size":219,"mtime":1650415383091,"results":"3","hashOfConfig":"4"},{"size":8478,"mtime":1656873958450,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1tew5a9",{"filePath":"9","messages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/kipland/Metaverse/pz-portal-react/src/index.js",[],["12","13"],"/Users/kipland/Metaverse/pz-portal-react/src/App.js",["14","15","16"],"\nimport React, {useEffect, useState} from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport idl from './idl.json';\nimport kp from './keypair.json'\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\n// Logic for keypair generation needs to be changed in order for user\n// not to be prompted for new account upon refresh\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// Constants\nconst TWITTER_HANDLE = 'kiplandvaughn';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n\nconst TEST_MSGs = [\n  'Hey this is a test',\n  'Test number 2',\n  'eat your toothpaste',\n  'also meat too'\n]\n\nconst App = () => {\n  /*\n    * This function holds the logic for deciding if a Phantom Wallet is\n    * connected or not\n    */\n\n  const[walletAddress, setWalletAddress] = useState(null);\n  const[inputValue, setInputValue] = useState('');\n  const[msgList, setMsgList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    /* try to create solana object from window */\n    try {\n\n      const {solana} = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          \n         /*\n         * The solana object gives us a function that will allow us to connect\n         * directly with the user's wallet!\n         */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          \n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /* calls setWalletAddress function in the state variable declared above\n          * this assigns the walletAddress value to response.publicKey.toString()\n          */\n          setWalletAddress(response.publicKey.toString());\n\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n    /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendMsg = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No input was given, try again.\")\n      return\n    }\n    setInputValue('');\n    console.log('MSG Contents: ', inputValue);\n\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addMsg(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },  \n      });\n      console.log('MSG successfully sent to program ', inputValue)\n      \n      await getMsgList();\n    } catch (error) {\n      console.log('Error sending gif', error)\n    }\n    \n\n\n  };\n\n  /* This function fires off when you submit text on the webpage */\n  /* This calls the function setInputValue, which like the walletAddress, is\n  a part of a state variable. so setInputValue's only purpose to to assign a value \n  to inputValue */\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      /* getProvider is a way of creating a secure connection to Solana\n      which is why it is utilizing the window.solana object */\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const createMsgAccount = async () => {\n    try{\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log('ping')\n\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log('Created new BaseAccount with address:', baseAccount.publicKey.toString())\n      await getMsgList();\n    } catch(error) {\n      console.log('Error creating BaseAccount account:', error)\n    } \n  }\n\n    /* React function that just returns some HTML.\n    * This HTML is the connect to wallet button, that it's onClick effect is to run the connectWallet\n    * function above.\n    */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}>\n      Connect to Wallet\n    </button>\n  );\n\n  const renderNotConnectIntoText = () => (\n   <div className='intro-text'>\n    <p className=\"header\">pz portal</p>\n    <p className=\"sub-text\">\n    place your mark on the ancient texts of pz industries\n    </p>\n  </div>\n  );\n\n\n  const renderConnectedContainer = () => {\n    if (msgList === null) {\n      return (\n        <div className='connected-container'>\n          <button className='cta-button submit-gif-button' onClick={createMsgAccount}>\n            Do One-Time initialization for MSG Program Account\n          </button>\n        </div>\n      )\n    }\n\n      else{\n    return(\n        <div className=\"connected-container\">\n\n        {/* input box goes here! */}\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          sendMsg();\n        }}>\n\n        <input \n          type=\"text\" \n          placeholder='enter a message'\n          value={inputValue}\n          onChange={onInputChange}\n        />\n        <button type=\"submit\" className='cta-button submit-msg-button'>\n          submit\n        </button>\n        \n\n      </form>\n      <div className=\"msg-grid\">\n        {msgList.map((item, index ) => (\n          <div className=\"msg-item\" key={index}>\n            <li>{item.msgContent}</li>\n          </div>\n        ))}\n      </div>\n    </div>\n    )\n  }\n}\n  \n\n  /*\n    * When our component first mounts, let's check to see if we have a connected\n    * Phantom Wallet\n    */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getMsgList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setMsgList(account.msgList)\n  \n    } catch (error) {\n      console.log(\"Error in getMsgList: \", error)\n      setMsgList(null);\n    }\n  }\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching messages..\")\n      getMsgList()\n    }\n  }, [walletAddress]);\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className='icon'>ðŸ“œðŸ”®</p>\n          {/* This renders the connect to wallet button from a function declared above */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {!walletAddress && renderNotConnectIntoText()}\n\n          {/* This renders when walletAddress has a value, displaying the message board and \n          input box  */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n",{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","severity":1,"message":"22","line":11,"column":24,"nodeType":"23","messageId":"24","endLine":11,"endColumn":31},{"ruleId":"21","severity":1,"message":"25","line":36,"column":7,"nodeType":"23","messageId":"24","endLine":36,"endColumn":16},{"ruleId":"26","severity":1,"message":"27","line":271,"column":6,"nodeType":"28","endLine":271,"endColumn":21,"suggestions":"29"},"no-native-reassign",["30"],"no-negated-in-lhs",["31"],"no-unused-vars","'Keypair' is assigned a value but never used.","Identifier","unusedVar","'TEST_MSGs' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMsgList'. Either include it or remove the dependency array.","ArrayExpression",["32"],"no-global-assign","no-unsafe-negation",{"desc":"33","fix":"34"},"Update the dependencies array to be: [getMsgList, walletAddress]",{"range":"35","text":"36"},[7525,7540],"[getMsgList, walletAddress]"]