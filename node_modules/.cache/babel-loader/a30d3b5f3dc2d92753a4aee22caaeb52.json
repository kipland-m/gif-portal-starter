{"ast":null,"code":"var _jsxFileName = \"/Users/kipland/Metaverse/pz-portal-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor'; // SystemProgram is a reference to the Solana runtime!\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram,\n  Keypair\n} = web3; // Create a keypair for the account that will hold the GIF data.\n\nlet baseAccount = Keypair.generate(); // Get our program's id from the IDL file.\n\nconst programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nconst network = clusterApiUrl('devnet'); // Controls how we want to acknowledge when a transaction is \"done\".\n\nconst opts = {\n  preflightCommitment: \"processed\"\n}; // Constants\n\nconst TWITTER_HANDLE = 'kiplandvaughn';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_MSGs = ['Hey this is a test', 'Test number 2', 'eat your toothpaste', 'also meat too'];\n\nconst App = () => {\n  _s();\n\n  /*\n    * This function holds the logic for deciding if a Phantom Wallet is\n    * connected or not\n    */\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [msgList, setMsgList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    /* try to create solana object from window */\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          /*\n          * The solana object gives us a function that will allow us to connect\n          * directly with the user's wallet!\n          */\n\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          /* calls setWalletAddress function in the state variable declared above\n          * this assigns the walletAddress value to response.publicKey.toString()\n          */\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  /*\n  * Let's define this method so our code doesn't break.\n  * We will write the logic for this next!\n  */\n\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendMsg = async () => {\n    if (inputValue.length > 0) {\n      console.log(\"Given message:\", inputValue);\n      setMsgList([...msgList, inputValue]);\n      setInputValue('');\n    } else {\n      console.log(\"No input was given, try again.\");\n    }\n  };\n  /* This function fires off when you submit text on the webpage */\n\n  /* This calls the function setInputValue, which like the walletAddress, is\n  a part of a state variable. so setInputValue's only purpose to to assign a value \n  to inputValue */\n\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n  /* React function that just returns some HTML.\n  * This HTML is the connect to wallet button, that it's onClick effect is to run the connectWallet\n  * function above.\n  */\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n\n  const renderNotConnectIntoText = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"intro-text\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"header\",\n      children: \"pz portal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sub-text\",\n      children: \"place your mark on the ancient texts of pz industries\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 4\n  }, this);\n\n  const renderConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => {\n        event.preventDefault();\n        sendMsg();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"enter a message\",\n        value: inputValue,\n        onChange: onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"cta-button submit-msg-button\",\n        children: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"msg-grid\",\n      children: msgList.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"msg-item\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: msg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)\n      }, msg, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n  /*\n    * When our component first mounts, let's check to see if we have a connected\n    * Phantom Wallet\n    */\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getMsgList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setMsgList(account.msgList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setMsgList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching messages..\");\n      getMsgList();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"icon\",\n          children: \"\\uD83D\\uDCDC\\uD83D\\uDD2E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), !walletAddress && renderNotConnectIntoText(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"oT8859rI8hpc+UHyHPl+f9ivzkI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kipland/Metaverse/pz-portal-react/src/App.js"],"names":["React","useEffect","useState","idl","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","SystemProgram","Keypair","baseAccount","generate","programID","metadata","address","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","TEST_MSGs","App","walletAddress","setWalletAddress","inputValue","setInputValue","msgList","setMsgList","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","alert","error","connectWallet","sendMsg","length","onInputChange","event","value","target","getProvider","connection","provider","renderNotConnectedContainer","renderNotConnectIntoText","renderConnectedContainer","preventDefault","map","msg","onLoad","addEventListener","removeEventListener","getMsgList","program","account","fetch","twitterLogo"],"mappings":"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","sourcesContent":["\nimport React, {useEffect, useState} from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nlet baseAccount = Keypair.generate();\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// Constants\nconst TWITTER_HANDLE = 'kiplandvaughn';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n\nconst TEST_MSGs = [\n  'Hey this is a test',\n  'Test number 2',\n  'eat your toothpaste',\n  'also meat too'\n]\n\nconst App = () => {\n  /*\n    * This function holds the logic for deciding if a Phantom Wallet is\n    * connected or not\n    */\n\n  const[walletAddress, setWalletAddress] = useState(null);\n  const[inputValue, setInputValue] = useState('');\n  const[msgList, setMsgList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    /* try to create solana object from window */\n    try {\n\n      const {solana} = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          \n         /*\n         * The solana object gives us a function that will allow us to connect\n         * directly with the user's wallet!\n         */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          \n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /* calls setWalletAddress function in the state variable declared above\n          * this assigns the walletAddress value to response.publicKey.toString()\n          */\n          setWalletAddress(response.publicKey.toString());\n\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n    /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendMsg = async () => {\n    if (inputValue.length > 0) {\n      console.log(\"Given message:\", inputValue)\n      setMsgList([...msgList, inputValue])\n      setInputValue('')\n    } else {\n      console.log(\"No input was given, try again.\")\n    }\n\n\n  };\n\n  /* This function fires off when you submit text on the webpage */\n  /* This calls the function setInputValue, which like the walletAddress, is\n  a part of a state variable. so setInputValue's only purpose to to assign a value \n  to inputValue */\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n    /* React function that just returns some HTML.\n    * This HTML is the connect to wallet button, that it's onClick effect is to run the connectWallet\n    * function above.\n    */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}>\n      Connect to Wallet\n    </button>\n  );\n\n  const renderNotConnectIntoText = () => (\n   <div className='intro-text'>\n    <p className=\"header\">pz portal</p>\n    <p className=\"sub-text\">\n    place your mark on the ancient texts of pz industries\n    </p>\n  </div>\n  );\n\n\n  const renderConnectedContainer = () => (\n    <div className=\"connected-container\">\n      {/* input box goes here! */}\n      <form onSubmit={(event) => {\n        event.preventDefault();\n        sendMsg();\n      }}>\n        <input type=\"text\" \n        placeholder='enter a message'\n        value={inputValue}\n        onChange={onInputChange}\n        />\n        <button type=\"submit\" className='cta-button submit-msg-button'>submit</button>\n\n      </form>\n      <div className=\"msg-grid\">\n        {msgList.map(msg => (\n          <div className=\"msg-item\" key={msg}>\n            <li>{msg}</li>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n  \n\n  /*\n    * When our component first mounts, let's check to see if we have a connected\n    * Phantom Wallet\n    */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getMsgList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setMsgList(account.msgList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setMsgList(null);\n    }\n  }\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching messages..\")\n      getMsgList()\n    }\n  }, [walletAddress]);\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className='icon'>ðŸ“œðŸ”®</p>\n          {/* This renders the connect to wallet button from a function declared above */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {!walletAddress && renderNotConnectIntoText()}\n\n          {/* This renders when walletAddress has a value, displaying the message board and \n          input box  */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}