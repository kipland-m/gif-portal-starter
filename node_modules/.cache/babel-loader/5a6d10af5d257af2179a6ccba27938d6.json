{"ast":null,"code":"var _jsxFileName = \"/Users/kipland/Metaverse/pz-portal-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor'; // SystemProgram is a reference to the Solana runtime!\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram,\n  Keypair\n} = web3; // Create a keypair for the account that will hold the GIF data.\n\nlet baseAccount = Keypair.generate(); // Get our program's id from the IDL file.\n\nconst programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nconst network = clusterApiUrl('devnet'); // Controls how we want to acknowledge when a transaction is \"done\".\n\nconst opts = {\n  preflightCommitment: \"processed\"\n}; // Constants\n\nconst TWITTER_HANDLE = 'kiplandvaughn';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_MSGs = ['Hey this is a test', 'Test number 2', 'eat your toothpaste', 'also meat too'];\n\nconst App = () => {\n  _s();\n\n  /*\n    * This function holds the logic for deciding if a Phantom Wallet is\n    * connected or not\n    */\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [msgList, setMsgList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    /* try to create solana object from window */\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          /*\n          * The solana object gives us a function that will allow us to connect\n          * directly with the user's wallet!\n          */\n\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          /* calls setWalletAddress function in the state variable declared above\n          * this assigns the walletAddress value to response.publicKey.toString()\n          */\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  /*\n  * Let's define this method so our code doesn't break.\n  * We will write the logic for this next!\n  */\n\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendMsg = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No input was given, try again.\");\n      return;\n    }\n\n    setInputValue('');\n    console.log('MSG Contents: ', inputValue);\n\n    if (inputValue.length > 0) {\n      console.log(\"Given message:\", inputValue);\n      setMsgList([...msgList, inputValue]);\n      setInputValue('');\n    }\n  };\n  /* This function fires off when you submit text on the webpage */\n\n  /* This calls the function setInputValue, which like the walletAddress, is\n  a part of a state variable. so setInputValue's only purpose to to assign a value \n  to inputValue */\n\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n    /* getProvider is a way of creating a secure connection to Solana\n    which is why it is utilizing the window.solana object */\n    connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  const createMsgAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log('ping');\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      console.log('Created new BaseAccount with address:', baseAccount.publicKey.toString());\n      await getMsgList();\n    } catch (error) {\n      console.log('Error creating BaseAccount account:', error);\n    }\n  };\n  /* React function that just returns some HTML.\n  * This HTML is the connect to wallet button, that it's onClick effect is to run the connectWallet\n  * function above.\n  */\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n\n  const renderNotConnectIntoText = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"intro-text\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"header\",\n      children: \"pz portal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sub-text\",\n      children: \"place your mark on the ancient texts of pz industries\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 4\n  }, this);\n\n  const renderConnectedContainer = () => {\n    if (msgList === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: createMsgAccount,\n          children: \"Do One-Time initialization for MSG Program Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => {\n            event.preventDefault();\n            sendMsg();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"enter a message\",\n            value: inputValue,\n            onChange: onInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"cta-button submit-msg-button\",\n            children: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"msg-grid\",\n          children: msgList.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"msg-item\",\n            children: /*#__PURE__*/_jsxDEV(\"li\", {\n              children: item.msgContent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 13\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 11\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  /*\n    * When our component first mounts, let's check to see if we have a connected\n    * Phantom Wallet\n    */\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getMsgList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setMsgList(account.msgList);\n    } catch (error) {\n      console.log(\"Error in getMsgList: \", error);\n      setMsgList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching messages..\");\n      getMsgList();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"icon\",\n          children: \"\\uD83D\\uDCDC\\uD83D\\uDD2E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), !walletAddress && renderNotConnectIntoText(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"oT8859rI8hpc+UHyHPl+f9ivzkI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","idl","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","SystemProgram","Keypair","baseAccount","generate","programID","metadata","address","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","TEST_MSGs","App","walletAddress","setWalletAddress","inputValue","setInputValue","msgList","setMsgList","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","alert","error","connectWallet","sendMsg","length","onInputChange","event","value","target","getProvider","connection","provider","createMsgAccount","program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getMsgList","renderNotConnectedContainer","renderNotConnectIntoText","renderConnectedContainer","preventDefault","map","item","index","msgContent","onLoad","addEventListener","removeEventListener","account","fetch","twitterLogo"],"sources":["/Users/kipland/Metaverse/pz-portal-react/src/App.js"],"sourcesContent":["\nimport React, {useEffect, useState} from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nlet baseAccount = Keypair.generate();\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// Constants\nconst TWITTER_HANDLE = 'kiplandvaughn';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n\nconst TEST_MSGs = [\n  'Hey this is a test',\n  'Test number 2',\n  'eat your toothpaste',\n  'also meat too'\n]\n\nconst App = () => {\n  /*\n    * This function holds the logic for deciding if a Phantom Wallet is\n    * connected or not\n    */\n\n  const[walletAddress, setWalletAddress] = useState(null);\n  const[inputValue, setInputValue] = useState('');\n  const[msgList, setMsgList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    /* try to create solana object from window */\n    try {\n\n      const {solana} = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          \n         /*\n         * The solana object gives us a function that will allow us to connect\n         * directly with the user's wallet!\n         */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          \n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /* calls setWalletAddress function in the state variable declared above\n          * this assigns the walletAddress value to response.publicKey.toString()\n          */\n          setWalletAddress(response.publicKey.toString());\n\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n    /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendMsg = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No input was given, try again.\")\n      return\n    }\n    setInputValue('');\n\n    console.log('MSG Contents: ', inputValue);\n    \n    if (inputValue.length > 0) {\n      console.log(\"Given message:\", inputValue)\n      setMsgList([...msgList, inputValue])\n      setInputValue('')\n    } \n\n\n  };\n\n  /* This function fires off when you submit text on the webpage */\n  /* This calls the function setInputValue, which like the walletAddress, is\n  a part of a state variable. so setInputValue's only purpose to to assign a value \n  to inputValue */\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      /* getProvider is a way of creating a secure connection to Solana\n      which is why it is utilizing the window.solana object */\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const createMsgAccount = async () => {\n    try{\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log('ping')\n\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log('Created new BaseAccount with address:', baseAccount.publicKey.toString())\n      await getMsgList();\n    } catch(error) {\n      console.log('Error creating BaseAccount account:', error)\n    } \n  }\n\n    /* React function that just returns some HTML.\n    * This HTML is the connect to wallet button, that it's onClick effect is to run the connectWallet\n    * function above.\n    */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}>\n      Connect to Wallet\n    </button>\n  );\n\n  const renderNotConnectIntoText = () => (\n   <div className='intro-text'>\n    <p className=\"header\">pz portal</p>\n    <p className=\"sub-text\">\n    place your mark on the ancient texts of pz industries\n    </p>\n  </div>\n  );\n\n\n  const renderConnectedContainer = () => {\n    if (msgList === null) {\n      return (\n        <div className='connected-container'>\n          <button className='cta-button submit-gif-button' onClick={createMsgAccount}>\n            Do One-Time initialization for MSG Program Account\n          </button>\n        </div>\n      )\n    }\n\n      else{\n    return(\n        <div className=\"connected-container\">\n\n        {/* input box goes here! */}\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          sendMsg();\n        }}>\n\n        <input \n          type=\"text\" \n          placeholder='enter a message'\n          value={inputValue}\n          onChange={onInputChange}\n        />\n        <button type=\"submit\" className='cta-button submit-msg-button'>\n          submit\n        </button>\n        \n\n      </form>\n      <div className=\"msg-grid\">\n        {msgList.map((item, index ) => (\n          <div className=\"msg-item\" key={index}>\n            <li>{item.msgContent}</li>\n          </div>\n        ))}\n      </div>\n    </div>\n    )\n  }\n}\n  \n\n  /*\n    * When our component first mounts, let's check to see if we have a connected\n    * Phantom Wallet\n    */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getMsgList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setMsgList(account.msgList)\n  \n    } catch (error) {\n      console.log(\"Error in getMsgList: \", error)\n      setMsgList(null);\n    }\n  }\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching messages..\")\n      getMsgList()\n    }\n  }, [walletAddress]);\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className='icon'>ðŸ“œðŸ”®</p>\n          {/* This renders the connect to wallet button from a function declared above */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {!walletAddress && renderNotConnectIntoText()}\n\n          {/* This renders when walletAddress has a value, displaying the message board and \n          input box  */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}